// sub_category.dart
// Domain entity representing a specialized learning sub-category
// Generated by AI based on user's level and focus areas

import 'package:equatable/equatable.dart';
import '../../../level_selection/domain/entities/user_profile.dart';

/// Sub-category entity representing a specialized learning area
/// Generated by AI based on user's level and focus areas
class SubCategory extends Equatable {
  final String id;
  final String title;
  final String description;
  final Level difficulty;
  final int estimatedLessons;
  final List<String> keyTopics;

  const SubCategory({
    required this.id,
    required this.title,
    required this.description,
    required this.difficulty,
    required this.estimatedLessons,
    required this.keyTopics,
  });

  /// Creates a copy with updated fields
  SubCategory copyWith({
    String? id,
    String? title,
    String? description,
    Level? difficulty,
    int? estimatedLessons,
    List<String>? keyTopics,
  }) {
    return SubCategory(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      difficulty: difficulty ?? this.difficulty,
      estimatedLessons: estimatedLessons ?? this.estimatedLessons,
      keyTopics: keyTopics ?? this.keyTopics,
    );
  }

  /// Gets a formatted string of key topics
  String get keyTopicsString => keyTopics.join(', ');

  /// Gets difficulty description for display
  String get difficultyDescription {
    switch (difficulty) {
      case Level.beginner:
        return 'Beginner';
      case Level.elementary:
        return 'Elementary';
      case Level.intermediate:
        return 'Intermediate';
      case Level.advanced:
        return 'Advanced';
    }
  }

  @override
  List<Object?> get props => [
    id,
    title,
    description,
    difficulty,
    estimatedLessons,
    keyTopics,
  ];
}

